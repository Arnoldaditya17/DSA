#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};
struct node *head, *newnode, *temp;

void insertfront()
{
    struct node *newnode;
    newnode = (struct node *)malloc(sizeof(struct node));
    printf("Enter the element which you want to insert at front:");
    scanf("%d", &newnode->data);
    newnode->next = head;
    head = newnode;
}

void insertback()
{
    struct node *newnode;
    newnode = (struct node *)malloc(sizeof(struct node));
    printf("Enter the value to add:");
    scanf("%d", &newnode->data);
    newnode->next = 0;
    temp = head;
    while (temp->next != 0)
    {
        temp = temp->next;
    }
    temp->next = newnode;
}

void insertposition()
{
    int count = 0;
    int pos;
    struct node *newnode;
    newnode = (struct node *)malloc(sizeof(struct node));

    temp = head;
    while (temp != NULL)
    {
        temp = temp->next;
        count++;
    }
    printf("\ncount:%d\n", count);
    temp = head;
    while (temp != 0)
    {
        printf("%d->", temp->data);
        temp = temp->next;
    }
    printf("\nEnter the position you want to add:");
    scanf("%d", &pos);
    if (pos > count)
    {
        printf("you can't insert");
    }
    else
    {
        temp = head;
        for (int i = 1; i < pos; i++)
        {
            temp = temp->next;
        }
        printf("Enter the value:");
        scanf("%d", &newnode->data);

        newnode->next = temp->next;
        temp->next = newnode;
    }
}

void deletefront()
{

    if (head == 0)
    {
        printf("list empty");
    }
    else
    {

        temp = head;
        head = head->next;
        free(temp);
    }
}

void deleteposition()
{
    int count = 0;
    int pos;

    temp = head;
    while (temp != NULL)
    {
        temp = temp->next;
        count++;
    }
    printf("\ncount:%d\n", count);
    temp = head;
    while (temp != 0)
    {
        printf("%d->", temp->data);
        temp = temp->next;
    }
    printf("\nEnter the position you want to delete:");
    scanf("%d", &pos);
    if (pos > count)
    {
        printf("you can't delete");
    }
    else
    {
        temp = head;
        for (int i = 1; i < pos - 1; i++)
        {
            temp = temp->next;
        }
        newnode = temp->next;
        temp->next = newnode->next;
        free(newnode);
    }
}

void Deleteend()
{
    int count = 0;
    int pos;

    temp = head;
    while (temp != NULL)
    {
        temp = temp->next;
        count++;
    }
    printf("\ncount:%d\n", count);
    temp = head;
    while (temp != 0)
    {
        printf("%d->", temp->data);
        temp = temp->next;
    }
    temp = head;
    for (int i = 1; i < count - 1;i++)
    {
        temp = temp->next;
    }
    temp->next = 0;
    newnode = temp->next;
    free(newnode);
}

void Display()
{
    temp = head;
    while (temp != 0)
    {
        printf("%d->", temp->data);
        temp = temp->next;
    }
}

int main()
{

    struct node *newnode;
    int choice = 1;

    head = 0;
    char cho;
    while (choice)
    {

        newnode = (struct node *)malloc(sizeof(struct node));
        printf("Enter the new node:");
        scanf("%d", &newnode->data);
        newnode->next = 0;
        if (head == 0)
        {
            head = temp = newnode;
        }
        else
        {
            temp->next = newnode;
            temp = newnode;
        }
        printf("do you want to continue(1,0)");
        scanf("%d", &choice);
    }

    do
    {
        int task;

        printf("CHOOSE THE TASK:\n");
        printf("1.Insert front\n");
        printf("2.Insert back\n");
        printf("3.Insert position\n");
        printf("4.Deletefront\n");
        printf("5.Delete position\n");
        printf("6.Delete End\n");
        printf("7.Display\n");

        printf("Enter your task:");
        scanf("%d", &task);
        switch (task)
        {
        case 1:

            insertfront();

            break;
        case 2:
        {
            insertback();
            break;
        }
        case 3:
        {
            insertposition();
            break;
        }
        case 4:
        {
            deletefront();
            break;
        }
        case 5:
        {
            deleteposition();
            break;
        }
        case 6:
        {
            Deleteend();
            break;
        }
        case 7:
        {
            Display();
            break;
        }
        default:
            printf("No such case found");
        }

        printf("\nDo you want to continue:Y/N");
        fflush(stdin);
        scanf("%c", &cho);
    } while (cho == 'y');
}
